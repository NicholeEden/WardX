// <auto-generated />
using System;
using EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFCore.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210201060532_HWMS06Final")]
    partial class HWMS06Final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCore.Domain.AdmissionFile", b =>
                {
                    b.Property<int>("AdmissionFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedSpecialistID")
                        .HasColumnType("int");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionID")
                        .HasColumnType("int");

                    b.HasKey("AdmissionFileID");

                    b.HasIndex("AssignedSpecialistID");

                    b.HasIndex("BedID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrescriptionID");

                    b.ToTable("AdmissionFile");

                    b.HasData(
                        new
                        {
                            AdmissionFileID = 101,
                            AdmissionDate = new DateTime(2020, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedSpecialistID = 105,
                            BedID = 101,
                            DischargeDate = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "none",
                            PatientID = 101,
                            PrescriptionID = 101
                        },
                        new
                        {
                            AdmissionFileID = 102,
                            AdmissionDate = new DateTime(2021, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedSpecialistID = 102,
                            BedID = 103,
                            DischargeDate = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Patient is feeling pain upon arrival",
                            PatientID = 102,
                            PrescriptionID = 103
                        },
                        new
                        {
                            AdmissionFileID = 103,
                            AdmissionDate = new DateTime(2021, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedSpecialistID = 104,
                            BedID = 106,
                            Notes = "none",
                            PatientID = 103
                        },
                        new
                        {
                            AdmissionFileID = 104,
                            AdmissionDate = new DateTime(2020, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedSpecialistID = 108,
                            BedID = 102,
                            Notes = "Patient has recent injury on the leg",
                            PatientID = 104
                        },
                        new
                        {
                            AdmissionFileID = 105,
                            AdmissionDate = new DateTime(2020, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AssignedSpecialistID = 103,
                            BedID = 104,
                            Notes = "none",
                            PatientID = 105
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Bar", b =>
                {
                    b.Property<int>("BarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BarID");

                    b.ToTable("Bar");

                    b.HasData(
                        new
                        {
                            BarID = 101,
                            Colour = "Green",
                            Description = "Registered Midwife"
                        },
                        new
                        {
                            BarID = 102,
                            Colour = "White",
                            Description = "Nursing Education Tutor"
                        },
                        new
                        {
                            BarID = 103,
                            Colour = "Navy Blue",
                            Description = "Registered Psychiatric Nurse"
                        },
                        new
                        {
                            BarID = 104,
                            Colour = "Dark Saxe Blue",
                            Description = "Registered Mental Nurse"
                        },
                        new
                        {
                            BarID = 105,
                            Colour = "Light Saxe Blue",
                            Description = "Registered Mental Defectives Nurse"
                        },
                        new
                        {
                            BarID = 106,
                            Colour = "Yellow",
                            Description = "Public Health Nursing"
                        },
                        new
                        {
                            BarID = 107,
                            Colour = "Silver",
                            Description = "Nursing Admin"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("BedID");

                    b.ToTable("Bed");

                    b.HasData(
                        new
                        {
                            BedID = 101,
                            Description = "HWMSB01",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 102,
                            Description = "HWMSB02",
                            isAvailable = false
                        },
                        new
                        {
                            BedID = 103,
                            Description = "HWMSB03",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 104,
                            Description = "HWMSB04",
                            isAvailable = false
                        },
                        new
                        {
                            BedID = 105,
                            Description = "HWMSB05",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 106,
                            Description = "HWMSB06",
                            isAvailable = false
                        },
                        new
                        {
                            BedID = 107,
                            Description = "HWMSB07",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 108,
                            Description = "HWMSB08",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 109,
                            Description = "HWMSB09",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 110,
                            Description = "HWMSB10",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 111,
                            Description = "HWMSB11",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 112,
                            Description = "HWMSB12",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 113,
                            Description = "HWMSB13",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 114,
                            Description = "HWMSB14",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 115,
                            Description = "HWMSB15",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 116,
                            Description = "HWMSB16",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 117,
                            Description = "HWMSB17",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 118,
                            Description = "HWMSB18",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 119,
                            Description = "HWMSB19",
                            isAvailable = true
                        },
                        new
                        {
                            BedID = 120,
                            Description = "HWMSB20",
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("EFCore.Domain.BloodGroup", b =>
                {
                    b.Property<int>("BloodGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("BloodGroupID");

                    b.ToTable("BloodGroup");

                    b.HasData(
                        new
                        {
                            BloodGroupID = 100,
                            BloodGroupName = "O Negative",
                            Description = "Universal Donor"
                        },
                        new
                        {
                            BloodGroupID = 101,
                            BloodGroupName = "A Positive",
                            Description = "Can donate to type A and AB positive"
                        },
                        new
                        {
                            BloodGroupID = 102,
                            BloodGroupName = "AB Postive",
                            Description = "Can donate to type AB positive"
                        },
                        new
                        {
                            BloodGroupID = 103,
                            BloodGroupName = "B Postive",
                            Description = "Can donate to type B and AB positive"
                        },
                        new
                        {
                            BloodGroupID = 104,
                            BloodGroupName = "O Postive",
                            Description = "Can donate to type O, A, B, AB postive"
                        },
                        new
                        {
                            BloodGroupID = 105,
                            BloodGroupName = "A Negative",
                            Description = "Can donate to type A, AB positive and negative"
                        },
                        new
                        {
                            BloodGroupID = 106,
                            BloodGroupName = "AB Negative",
                            Description = "Can donate to type AB positive and negative"
                        },
                        new
                        {
                            BloodGroupID = 107,
                            BloodGroupName = "B Negative",
                            Description = "Can donate to type B, AB positive and negative"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("CityID");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityID = 101,
                            CityName = "Port Elizabeth"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.ClerkComputer", b =>
                {
                    b.Property<int>("ClerkID")
                        .HasColumnType("int");

                    b.Property<int>("ComputerSkillID")
                        .HasColumnType("int");

                    b.Property<string>("ProficiencyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ClerkID", "ComputerSkillID");

                    b.HasIndex("ComputerSkillID");

                    b.ToTable("ClerkComputer");
                });

            modelBuilder.Entity("EFCore.Domain.Clocking", b =>
                {
                    b.Property<int>("ClockingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ClockInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClockOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<bool>("isClockedIn")
                        .HasColumnType("bit");

                    b.HasKey("ClockingID");

                    b.ToTable("Clocking");

                    b.HasData(
                        new
                        {
                            ClockingID = 101,
                            ClockInTime = new DateTime(2020, 1, 23, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 1, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 112,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 102,
                            ClockInTime = new DateTime(2020, 2, 25, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 2, 25, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 114,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 103,
                            ClockInTime = new DateTime(2020, 1, 27, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 3, 25, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 115,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 104,
                            ClockInTime = new DateTime(2020, 2, 29, 5, 10, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 4, 25, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 116,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 105,
                            ClockInTime = new DateTime(2020, 1, 2, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 5, 25, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 117,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 106,
                            ClockInTime = new DateTime(2020, 2, 4, 5, 30, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 6, 25, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 118,
                            isClockedIn = true
                        },
                        new
                        {
                            ClockingID = 107,
                            ClockInTime = new DateTime(2020, 1, 5, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            ClockOutTime = new DateTime(2020, 7, 25, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            NurseID = 119,
                            isClockedIn = true
                        });
                });

            modelBuilder.Entity("EFCore.Domain.ComputerSkill", b =>
                {
                    b.Property<int>("ComputerSkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("ComputerSkillID");

                    b.ToTable("ComputerSkill");

                    b.HasData(
                        new
                        {
                            ComputerSkillID = 101,
                            Application = "MS Office"
                        },
                        new
                        {
                            ComputerSkillID = 102,
                            Application = "Spreadsheets"
                        },
                        new
                        {
                            ComputerSkillID = 103,
                            Application = "Email Communication"
                        },
                        new
                        {
                            ComputerSkillID = 104,
                            Application = "Data Visualization"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiagnosedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisDetals")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("MedicalConditionID")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisID");

                    b.HasIndex("MedicalConditionID");

                    b.ToTable("Diagnosis");

                    b.HasData(
                        new
                        {
                            DiagnosisID = 101,
                            DiagnosedBy = 101,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(3971),
                            DiagnosisDetals = "Mild esophageal scaring is causing difficulty consuming solid foods.",
                            MedicalConditionID = 101
                        },
                        new
                        {
                            DiagnosisID = 102,
                            DiagnosedBy = 101,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(5889),
                            DiagnosisDetals = "Skin is very tender, may cause patient to be prone to cuts.",
                            MedicalConditionID = 104
                        },
                        new
                        {
                            DiagnosisID = 103,
                            DiagnosedBy = 111,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(5927),
                            DiagnosisDetals = "Fungi caused inflammation in the left lung.",
                            MedicalConditionID = 102
                        },
                        new
                        {
                            DiagnosisID = 104,
                            DiagnosedBy = 111,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(5930),
                            DiagnosisDetals = "Bruising along the soles of the feet.",
                            MedicalConditionID = 109
                        },
                        new
                        {
                            DiagnosisID = 105,
                            DiagnosedBy = 101,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(5931),
                            DiagnosisDetals = "Patient is experiencing abdominal pain and muscle tenderness.",
                            MedicalConditionID = 112
                        },
                        new
                        {
                            DiagnosisID = 106,
                            DiagnosedBy = 111,
                            DiagnosisDate = new DateTime(2021, 1, 30, 8, 5, 31, 577, DateTimeKind.Local).AddTicks(5933),
                            DiagnosisDetals = "Patient is experiencing abdominal pain.",
                            MedicalConditionID = 112
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorTypeID1")
                        .HasColumnType("int");

                    b.Property<string>("PracticeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("SpecializationID")
                        .HasColumnType("int");

                    b.Property<int?>("SpecializationID1")
                        .HasColumnType("int");

                    b.HasKey("DoctorID");

                    b.HasIndex("DoctorTypeID1");

                    b.HasIndex("SpecializationID1");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            DoctorID = 101,
                            DoctorTypeID = 110,
                            PracticeNumber = "HWMS-0090565",
                            SpecializationID = 114
                        },
                        new
                        {
                            DoctorID = 102,
                            DoctorTypeID = 104,
                            PracticeNumber = "HWMS-0090875",
                            SpecializationID = 116
                        },
                        new
                        {
                            DoctorID = 103,
                            DoctorTypeID = 108,
                            PracticeNumber = "HWMS-0091560",
                            SpecializationID = 103
                        },
                        new
                        {
                            DoctorID = 104,
                            DoctorTypeID = 101,
                            PracticeNumber = "HWMS-0091500",
                            SpecializationID = 109
                        },
                        new
                        {
                            DoctorID = 105,
                            DoctorTypeID = 111,
                            PracticeNumber = "HWMS-0091550",
                            SpecializationID = 106
                        },
                        new
                        {
                            DoctorID = 106,
                            DoctorTypeID = 107,
                            PracticeNumber = "HWMS-0091575",
                            SpecializationID = 104
                        },
                        new
                        {
                            DoctorID = 107,
                            DoctorTypeID = 109,
                            PracticeNumber = "HWMS-0091770",
                            SpecializationID = 113
                        },
                        new
                        {
                            DoctorID = 108,
                            DoctorTypeID = 106,
                            PracticeNumber = "HWMS-0091580",
                            SpecializationID = 102
                        },
                        new
                        {
                            DoctorID = 109,
                            DoctorTypeID = 103,
                            PracticeNumber = "HWMS-0091590",
                            SpecializationID = 101
                        },
                        new
                        {
                            DoctorID = 110,
                            DoctorTypeID = 105,
                            PracticeNumber = "HWMS-0091595",
                            SpecializationID = 112
                        },
                        new
                        {
                            DoctorID = 111,
                            DoctorTypeID = 110,
                            PracticeNumber = "HWMS-0091795",
                            SpecializationID = 113
                        });
                });

            modelBuilder.Entity("EFCore.Domain.DoctorInspection", b =>
                {
                    b.Property<int>("DoctorInspectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("DoctorInspectionID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("DoctorInspection");
                });

            modelBuilder.Entity("EFCore.Domain.DoctorSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftSlotID")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("MonthID");

                    b.HasIndex("ShiftSlotID");

                    b.ToTable("DoctorSchedule");
                });

            modelBuilder.Entity("EFCore.Domain.DoctorType", b =>
                {
                    b.Property<int>("DoctorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("DoctorTypeID");

                    b.ToTable("DoctorType");

                    b.HasData(
                        new
                        {
                            DoctorTypeID = 101,
                            Description = "Cardiologist"
                        },
                        new
                        {
                            DoctorTypeID = 102,
                            Description = "Endocrinologist"
                        },
                        new
                        {
                            DoctorTypeID = 103,
                            Description = "Surgeon"
                        },
                        new
                        {
                            DoctorTypeID = 104,
                            Description = "Gastroenterologist"
                        },
                        new
                        {
                            DoctorTypeID = 105,
                            Description = "Neurologist"
                        },
                        new
                        {
                            DoctorTypeID = 106,
                            Description = "Radiologist"
                        },
                        new
                        {
                            DoctorTypeID = 107,
                            Description = "Oncologist"
                        },
                        new
                        {
                            DoctorTypeID = 108,
                            Description = "Anesthesiologist"
                        },
                        new
                        {
                            DoctorTypeID = 109,
                            Description = "Physician"
                        },
                        new
                        {
                            DoctorTypeID = 110,
                            Description = "General Practitioner"
                        },
                        new
                        {
                            DoctorTypeID = 111,
                            Description = "Dermatologist"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.EmergencyContact", b =>
                {
                    b.Property<int>("EmergencyContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("EmergencyContactID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.HasIndex("SuburbID");

                    b.ToTable("EmergencyContact");
                });

            modelBuilder.Entity("EFCore.Domain.Formulation", b =>
                {
                    b.Property<int>("FormulationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("FormulationID");

                    b.ToTable("Formulation");

                    b.HasData(
                        new
                        {
                            FormulationID = 101,
                            Abbreviation = "Liq",
                            Description = "Liquid"
                        },
                        new
                        {
                            FormulationID = 102,
                            Abbreviation = "tab.",
                            Description = "Tablet"
                        },
                        new
                        {
                            FormulationID = 103,
                            Abbreviation = "cap.",
                            Description = "Capsule"
                        },
                        new
                        {
                            FormulationID = 104,
                            Abbreviation = "gtt",
                            Description = "Drops"
                        },
                        new
                        {
                            FormulationID = 105,
                            Abbreviation = "inj",
                            Description = "Injection"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicalAid", b =>
                {
                    b.Property<int>("MedicalAidPlanID")
                        .HasColumnType("int");

                    b.Property<int>("MedicalAidSchemeID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("DependantCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("MedicalAidPlanID1")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalAidSchemeID1")
                        .HasColumnType("int");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PrincipalFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("PrincipalLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MedicalAidPlanID", "MedicalAidSchemeID", "PatientID");

                    b.HasIndex("MedicalAidPlanID1");

                    b.HasIndex("MedicalAidSchemeID1");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("MedicalAid");

                    b.HasData(
                        new
                        {
                            MedicalAidPlanID = 109,
                            MedicalAidSchemeID = 101,
                            PatientID = 101,
                            DependantCode = "005494301",
                            MemberNumber = "005493103",
                            PrincipalFirstName = "Molly",
                            PrincipalLastName = "Smith"
                        },
                        new
                        {
                            MedicalAidPlanID = 106,
                            MedicalAidSchemeID = 101,
                            PatientID = 102,
                            DependantCode = "005430071",
                            MemberNumber = "005698103",
                            PrincipalFirstName = "Roland",
                            PrincipalLastName = "Connor"
                        },
                        new
                        {
                            MedicalAidPlanID = 101,
                            MedicalAidSchemeID = 102,
                            PatientID = 103,
                            DependantCode = "005491271",
                            MemberNumber = "005646523",
                            PrincipalFirstName = "Stephanie",
                            PrincipalLastName = "Panisello"
                        },
                        new
                        {
                            MedicalAidPlanID = 105,
                            MedicalAidSchemeID = 106,
                            PatientID = 104,
                            DependantCode = "005468571",
                            MemberNumber = "005425323",
                            PrincipalFirstName = "Nick",
                            PrincipalLastName = "Apostolides"
                        },
                        new
                        {
                            MedicalAidPlanID = 106,
                            MedicalAidSchemeID = 105,
                            PatientID = 105,
                            DependantCode = "005067371",
                            MemberNumber = "005446223",
                            PrincipalFirstName = "Jolene",
                            PrincipalLastName = "Andersen"
                        },
                        new
                        {
                            MedicalAidPlanID = 109,
                            MedicalAidSchemeID = 104,
                            PatientID = 106,
                            DependantCode = "005777371",
                            MemberNumber = "005455523",
                            PrincipalFirstName = "Jolene",
                            PrincipalLastName = "Andersen"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicalAidPlan", b =>
                {
                    b.Property<int>("MedicalAidPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MedicalAidPlanID");

                    b.ToTable("MedicalAidPlan");

                    b.HasData(
                        new
                        {
                            MedicalAidPlanID = 101,
                            Name = "Executive Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 102,
                            Name = "Comprehensive Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 103,
                            Name = "Priority Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 104,
                            Name = "Saver Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 105,
                            Name = "Core Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 106,
                            Name = "Smart Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 107,
                            Name = "Keycare Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 108,
                            Name = "Standard Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 109,
                            Name = "Family Plan"
                        },
                        new
                        {
                            MedicalAidPlanID = 110,
                            Name = "Premium Plan"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicalAidScheme", b =>
                {
                    b.Property<int>("MedicalAidSchemeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("MedicalAidSchemeID");

                    b.ToTable("MedicalAidScheme");

                    b.HasData(
                        new
                        {
                            MedicalAidSchemeID = 101,
                            Name = "Discovery Health"
                        },
                        new
                        {
                            MedicalAidSchemeID = 102,
                            Name = "Fedhealth"
                        },
                        new
                        {
                            MedicalAidSchemeID = 103,
                            Name = "Medihelp"
                        },
                        new
                        {
                            MedicalAidSchemeID = 104,
                            Name = "Medshield"
                        },
                        new
                        {
                            MedicalAidSchemeID = 105,
                            Name = "Bonitas"
                        },
                        new
                        {
                            MedicalAidSchemeID = 106,
                            Name = "Momentum"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicalCondition", b =>
                {
                    b.Property<int>("MedicalConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Symptom")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MedicalConditionID");

                    b.ToTable("MedicalCondition");

                    b.HasData(
                        new
                        {
                            MedicalConditionID = 101,
                            Name = "Esophageal cancer",
                            Symptom = "Symptoms often include difficulty in swallowing and weight loss."
                        },
                        new
                        {
                            MedicalConditionID = 102,
                            Name = "Pneumonia",
                            Symptom = "Symptoms typically include some combination of productive or dry cough, chest pain, fever and difficulty breathing."
                        },
                        new
                        {
                            MedicalConditionID = 103,
                            Name = "Colorectal cancer",
                            Symptom = "Symptoms may include blood in the stool, a change in bowel movements, weight loss, and fatigue."
                        },
                        new
                        {
                            MedicalConditionID = 104,
                            Name = "Ulcer",
                            Symptom = "The skin around the ulcer may be red, swollen, and tender."
                        },
                        new
                        {
                            MedicalConditionID = 105,
                            Name = "Anemia",
                            Symptom = "Symptoms may include confusion, feeling like one is going to pass out, loss of consciousness, and increased thirst."
                        },
                        new
                        {
                            MedicalConditionID = 106,
                            Name = "Lower gastrointestinal bleeding",
                            Symptom = "Bleeding which involves a bleed anywhere from the ileocecal valve to the anus."
                        },
                        new
                        {
                            MedicalConditionID = 107,
                            Name = "Cachexia",
                            Symptom = "Systemic inflammation from these conditions can cause detrimental changes to metabolism and body composition."
                        },
                        new
                        {
                            MedicalConditionID = 108,
                            Name = "Hodgkin lymphoma",
                            Symptom = "Symptoms may include fever, night sweats, and weight loss."
                        },
                        new
                        {
                            MedicalConditionID = 109,
                            Name = "Leukemia",
                            Symptom = "Symptoms may include bleeding and bruising, feeling tired, fever, and an increased risk of infections."
                        },
                        new
                        {
                            MedicalConditionID = 110,
                            Name = "Liver cancer",
                            Symptom = "Symptoms of liver cancer may include a lump or pain in the right side below the rib cage, swelling of the abdomen, yellowish skin, easy bruising, weight loss and weakness."
                        },
                        new
                        {
                            MedicalConditionID = 111,
                            Name = "Paraneoplastic syndrome",
                            Symptom = "The most common presentation is a fever."
                        },
                        new
                        {
                            MedicalConditionID = 112,
                            Name = "Hypercalcaemia",
                            Symptom = "Symptoms include cardiac arrhythmias (especially in those taking digoxin), fatigue, nausea, vomiting (emesis), loss of appetite, abdominal pain, & paralytic ileus."
                        },
                        new
                        {
                            MedicalConditionID = 113,
                            Name = "Hyponatremia",
                            Symptom = "Symptoms of hyponatremia include nausea and vomiting, headache, short-term memory loss, confusion, lethargy, fatigue, loss of appetite, irritability, muscle weakness, spasms or cramps, seizures, and decreased consciousness or coma."
                        },
                        new
                        {
                            MedicalConditionID = 114,
                            Name = "Lymphadenopathy",
                            Symptom = "Inflammation of the lymphatic vessels is known as lymphangitis."
                        },
                        new
                        {
                            MedicalConditionID = 115,
                            Name = "Splenomegaly",
                            Symptom = "Symptoms may include abdominal pain, chest pain, chest pain similar to pleuritic pain when stomach, bladder or bowels are full, back pain, early satiety due to splenic encroachment, or the symptoms of anemia due to accompanying cytopenia."
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicalHistory", b =>
                {
                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("BMI")
                        .HasColumnType("float");

                    b.Property<int>("BloodGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("ExistingCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("PatientID");

                    b.HasIndex("BloodGroupID");

                    b.ToTable("MedicalHistory");
                });

            modelBuilder.Entity("EFCore.Domain.Medication", b =>
                {
                    b.Property<int>("MedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormulationID")
                        .HasColumnType("int");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("MedicationScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("MedicationStrength")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MedicationID");

                    b.HasIndex("FormulationID");

                    b.HasIndex("MedicationScheduleID");

                    b.ToTable("Medication");

                    b.HasData(
                        new
                        {
                            MedicationID = 101,
                            ExpiryDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 101,
                            MedicationName = "Altertamine",
                            MedicationScheduleID = 103,
                            MedicationStrength = "100 mg"
                        },
                        new
                        {
                            MedicationID = 102,
                            ExpiryDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 101,
                            MedicationName = "Capecitabine",
                            MedicationScheduleID = 103,
                            MedicationStrength = "500 mg"
                        },
                        new
                        {
                            MedicationID = 103,
                            ExpiryDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 101,
                            MedicationName = "Cisplatin",
                            MedicationScheduleID = 103,
                            MedicationStrength = "50 mg"
                        },
                        new
                        {
                            MedicationID = 104,
                            ExpiryDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 102,
                            MedicationName = "Amoxil",
                            MedicationScheduleID = 102,
                            MedicationStrength = "500 mg"
                        },
                        new
                        {
                            MedicationID = 105,
                            ExpiryDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 105,
                            MedicationName = "Morphine",
                            MedicationScheduleID = 104,
                            MedicationStrength = "10 mg"
                        },
                        new
                        {
                            MedicationID = 106,
                            ExpiryDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 102,
                            MedicationName = "Asprin",
                            MedicationScheduleID = 101,
                            MedicationStrength = "325 mg"
                        },
                        new
                        {
                            MedicationID = 107,
                            ExpiryDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 103,
                            MedicationName = "Oxycodone",
                            MedicationScheduleID = 104,
                            MedicationStrength = "10 mg"
                        },
                        new
                        {
                            MedicationID = 108,
                            ExpiryDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 105,
                            MedicationName = "Insulin Mixtard",
                            MedicationScheduleID = 103,
                            MedicationStrength = " mg"
                        },
                        new
                        {
                            MedicationID = 109,
                            ExpiryDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 102,
                            MedicationName = "Methadone",
                            MedicationScheduleID = 103,
                            MedicationStrength = "10 mg"
                        },
                        new
                        {
                            MedicationID = 110,
                            ExpiryDate = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            FormulationID = 103,
                            MedicationName = "Ibuprofen",
                            MedicationScheduleID = 102,
                            MedicationStrength = " 200 mg"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.MedicationSchedule", b =>
                {
                    b.Property<int>("MedicationScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchedulingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("MedicationScheduleID");

                    b.ToTable("MedicationSchedule");

                    b.HasData(
                        new
                        {
                            MedicationScheduleID = 101,
                            SchedulingStatus = "General"
                        },
                        new
                        {
                            MedicationScheduleID = 102,
                            SchedulingStatus = "Pharmacy Medicine"
                        },
                        new
                        {
                            MedicationScheduleID = 103,
                            SchedulingStatus = "Prescription Only"
                        },
                        new
                        {
                            MedicationScheduleID = 104,
                            SchedulingStatus = "Controlled Drug"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Month", b =>
                {
                    b.Property<int>("MonthID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndDate")
                        .HasColumnType("int");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("StartDate")
                        .HasColumnType("int");

                    b.HasKey("MonthID");

                    b.ToTable("Month");

                    b.HasData(
                        new
                        {
                            MonthID = 101,
                            EndDate = 31,
                            MonthName = "January",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 102,
                            EndDate = 29,
                            MonthName = "February",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 103,
                            EndDate = 31,
                            MonthName = "March",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 104,
                            EndDate = 30,
                            MonthName = "April",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 105,
                            EndDate = 31,
                            MonthName = "May",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 106,
                            EndDate = 30,
                            MonthName = "June",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 107,
                            EndDate = 31,
                            MonthName = "July",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 108,
                            EndDate = 31,
                            MonthName = "August",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 109,
                            EndDate = 30,
                            MonthName = "September",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 110,
                            EndDate = 31,
                            MonthName = "October",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 111,
                            EndDate = 30,
                            MonthName = "November",
                            StartDate = 1
                        },
                        new
                        {
                            MonthID = 112,
                            EndDate = 31,
                            MonthName = "December",
                            StartDate = 1
                        });
                });

            modelBuilder.Entity("EFCore.Domain.NextOfKin", b =>
                {
                    b.Property<int>("NextOfKinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("NextOfKinID");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.HasIndex("SuburbID");

                    b.ToTable("NextOfKin");

                    b.HasData(
                        new
                        {
                            NextOfKinID = 101,
                            AddressLine1 = "50 Seaview Street",
                            EmailAddress = "M.Smith@techbuzz.co.za",
                            FirstName = "Molly",
                            Gender = 0,
                            LastName = "Smith",
                            MobileNumber = "0747477520",
                            PatientID = 101,
                            Relationship = "Mother",
                            SuburbID = 105
                        },
                        new
                        {
                            NextOfKinID = 102,
                            AddressLine1 = "50 Seaview Street",
                            EmailAddress = "R.Connor@techbuzz.co.za",
                            FirstName = "Roland",
                            Gender = 1,
                            LastName = "Connor",
                            MobileNumber = "0761367520",
                            PatientID = 102,
                            Relationship = "Father",
                            SuburbID = 103
                        },
                        new
                        {
                            NextOfKinID = 103,
                            AddressLine1 = "8 Clark Street",
                            EmailAddress = "Joel.Panisello@techbuzz.co.za",
                            FirstName = "Joel",
                            Gender = 0,
                            LastName = "Panisello",
                            MobileNumber = "0761390200",
                            PatientID = 103,
                            Relationship = "Partner",
                            SuburbID = 109
                        },
                        new
                        {
                            NextOfKinID = 104,
                            AddressLine1 = "8 Doreen Drive",
                            EmailAddress = "T.Apostolides@techbuzz.co.za",
                            FirstName = "Ted",
                            Gender = 1,
                            LastName = "Apostolides",
                            MobileNumber = "0761314690",
                            PatientID = 104,
                            Relationship = "Partner",
                            SuburbID = 107
                        },
                        new
                        {
                            NextOfKinID = 105,
                            AddressLine1 = "8 Deveroux Ave",
                            EmailAddress = "R.Andersen@techbuzz.co.za",
                            FirstName = "Renier",
                            Gender = 2,
                            LastName = "Andersen",
                            MobileNumber = "0761324680",
                            PatientID = 105,
                            Relationship = "Partner",
                            SuburbID = 106
                        },
                        new
                        {
                            NextOfKinID = 106,
                            AddressLine1 = "8 Deveroux Ave",
                            EmailAddress = "B.Oliver@techbuzz.co.za",
                            FirstName = "Bob",
                            Gender = 2,
                            LastName = "Oliver",
                            MobileNumber = "0761399980",
                            PatientID = 106,
                            Relationship = "Partner",
                            SuburbID = 106
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Nurse", b =>
                {
                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("NurseTypeID")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationID")
                        .HasColumnType("int");

                    b.Property<bool>("isHeadNurse")
                        .HasColumnType("bit");

                    b.Property<bool>("isWardManager")
                        .HasColumnType("bit");

                    b.HasKey("NurseID");

                    b.HasIndex("NurseTypeID");

                    b.HasIndex("SpecializationID");

                    b.ToTable("Nurse");

                    b.HasData(
                        new
                        {
                            NurseID = 112,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 114,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 115,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 116,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 117,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 118,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 119,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = false
                        },
                        new
                        {
                            NurseID = 120,
                            NurseTypeID = 102,
                            SpecializationID = 114,
                            isHeadNurse = false,
                            isWardManager = true
                        });
                });

            modelBuilder.Entity("EFCore.Domain.NurseBar", b =>
                {
                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("BarID")
                        .HasColumnType("int");

                    b.HasKey("NurseID", "BarID");

                    b.HasIndex("BarID");

                    b.ToTable("NurseBar");
                });

            modelBuilder.Entity("EFCore.Domain.NurseInspection", b =>
                {
                    b.Property<int>("NurseInspectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("NurseInspectionID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientID");

                    b.ToTable("NurseInspection");
                });

            modelBuilder.Entity("EFCore.Domain.NurseSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<int>("ShiftSlotID")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("ScheduleID");

                    b.HasIndex("MonthID");

                    b.HasIndex("NurseID");

                    b.HasIndex("ShiftSlotID");

                    b.ToTable("NurseSchedule");

                    b.HasData(
                        new
                        {
                            ScheduleID = 101,
                            MonthID = 101,
                            NurseID = 114,
                            ShiftSlotID = 101,
                            isAvailable = true
                        },
                        new
                        {
                            ScheduleID = 102,
                            MonthID = 102,
                            NurseID = 115,
                            ShiftSlotID = 101,
                            isAvailable = true
                        },
                        new
                        {
                            ScheduleID = 103,
                            MonthID = 103,
                            NurseID = 116,
                            ShiftSlotID = 101,
                            isAvailable = true
                        },
                        new
                        {
                            ScheduleID = 104,
                            MonthID = 101,
                            NurseID = 117,
                            ShiftSlotID = 102,
                            isAvailable = true
                        },
                        new
                        {
                            ScheduleID = 105,
                            MonthID = 102,
                            NurseID = 118,
                            ShiftSlotID = 102,
                            isAvailable = true
                        },
                        new
                        {
                            ScheduleID = 106,
                            MonthID = 103,
                            NurseID = 119,
                            ShiftSlotID = 102,
                            isAvailable = true
                        });
                });

            modelBuilder.Entity("EFCore.Domain.NurseType", b =>
                {
                    b.Property<int>("NurseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("NurseTypeID");

                    b.ToTable("NurseType");

                    b.HasData(
                        new
                        {
                            NurseTypeID = 101,
                            Description = "Registered Nurse"
                        },
                        new
                        {
                            NurseTypeID = 102,
                            Description = "Midwife Nurse"
                        },
                        new
                        {
                            NurseTypeID = 103,
                            Description = "Nurse Practitioner"
                        },
                        new
                        {
                            NurseTypeID = 104,
                            Description = "Oncology Nurse"
                        },
                        new
                        {
                            NurseTypeID = 105,
                            Description = "Licensed Practical Nurse"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("SuburbID");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            PatientID = 101,
                            AddressLine1 = "50 Seaview Street",
                            DOB = new DateTime(1990, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "J.Smith@techbuzz.co.za",
                            FirstName = "John",
                            Gender = 1,
                            IDNumber = "9007107005123",
                            LastName = "Smith",
                            MobileNumber = "0745017520",
                            SuburbID = 105
                        },
                        new
                        {
                            PatientID = 102,
                            AddressLine1 = "28 Albert Street",
                            DOB = new DateTime(1995, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "s223186430@mandela.ac.za",
                            FirstName = "Sarah",
                            Gender = 0,
                            IDNumber = "9506308951437",
                            LastName = "Connor",
                            MobileNumber = "0849851122",
                            SuburbID = 103
                        },
                        new
                        {
                            PatientID = 103,
                            AddressLine1 = "8 Clark Street",
                            DOB = new DateTime(1980, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "S.Panisello@techbuzz.co.za",
                            FirstName = "Stephanie",
                            Gender = 0,
                            IDNumber = "8007158951437",
                            LastName = "Panisello",
                            MobileNumber = "0849871582",
                            SuburbID = 109
                        },
                        new
                        {
                            PatientID = 104,
                            AddressLine1 = "8 Doreen Drive",
                            DOB = new DateTime(1989, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "N.Apostolides@techbuzz.co.za",
                            FirstName = "Nick",
                            Gender = 1,
                            IDNumber = "8904106951857",
                            LastName = "Apostolides",
                            MobileNumber = "0840984108",
                            SuburbID = 107
                        },
                        new
                        {
                            PatientID = 105,
                            AddressLine1 = "8 Deveroux Ave",
                            DOB = new DateTime(1985, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "J.Andersen@techbuzz.co.za",
                            FirstName = "Jolene",
                            Gender = 3,
                            IDNumber = "8504203951422",
                            LastName = "Andersen",
                            MobileNumber = "0840039514",
                            SuburbID = 106
                        },
                        new
                        {
                            PatientID = 106,
                            AddressLine1 = "8 Deveroux Ave",
                            DOB = new DateTime(1980, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "P.Oliver@techbuzz.co.za",
                            FirstName = "Pam",
                            Gender = 2,
                            IDNumber = "8010053951422",
                            LastName = "Oliver",
                            MobileNumber = "0845550514",
                            SuburbID = 106
                        });
                });

            modelBuilder.Entity("EFCore.Domain.PatientMovement", b =>
                {
                    b.Property<int>("PatientMovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdmissionFileID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MoveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<bool>("isCheckedOut")
                        .HasColumnType("bit");

                    b.HasKey("PatientMovementID");

                    b.HasIndex("AdmissionFileID");

                    b.ToTable("PatientMovement");

                    b.HasData(
                        new
                        {
                            PatientMovementID = 101,
                            AdmissionFileID = 103,
                            CheckInTime = new DateTime(2021, 1, 29, 8, 20, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            CheckOutTime = new DateTime(2021, 1, 29, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            MoveDate = new DateTime(2021, 1, 29, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            Reason = 2,
                            isCheckedOut = false
                        },
                        new
                        {
                            PatientMovementID = 102,
                            AdmissionFileID = 103,
                            CheckInTime = new DateTime(2021, 1, 30, 10, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            CheckOutTime = new DateTime(2021, 1, 30, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            MoveDate = new DateTime(2021, 1, 30, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            Reason = 1,
                            isCheckedOut = false
                        },
                        new
                        {
                            PatientMovementID = 103,
                            AdmissionFileID = 103,
                            CheckInTime = new DateTime(2021, 1, 31, 8, 35, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            CheckOutTime = new DateTime(2021, 1, 31, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            MoveDate = new DateTime(2021, 1, 31, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            Reason = 3,
                            isCheckedOut = false
                        },
                        new
                        {
                            PatientMovementID = 104,
                            AdmissionFileID = 104,
                            CheckInTime = new DateTime(2021, 1, 29, 8, 20, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            CheckOutTime = new DateTime(2021, 1, 29, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            MoveDate = new DateTime(2021, 1, 29, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7243),
                            Reason = 3,
                            isCheckedOut = false
                        },
                        new
                        {
                            PatientMovementID = 105,
                            AdmissionFileID = 104,
                            CheckInTime = new DateTime(2021, 1, 30, 10, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            CheckOutTime = new DateTime(2021, 1, 30, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            MoveDate = new DateTime(2021, 1, 30, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7281),
                            Reason = 1,
                            isCheckedOut = false
                        },
                        new
                        {
                            PatientMovementID = 106,
                            AdmissionFileID = 104,
                            CheckInTime = new DateTime(2021, 1, 31, 8, 35, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            CheckOutTime = new DateTime(2021, 1, 31, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            MoveDate = new DateTime(2021, 1, 31, 8, 5, 31, 582, DateTimeKind.Local).AddTicks(7284),
                            Reason = 2,
                            isCheckedOut = false
                        });
                });

            modelBuilder.Entity("EFCore.Domain.PatientVital", b =>
                {
                    b.Property<int>("AdmisssionFileID")
                        .HasColumnType("int");

                    b.Property<int>("VitalSignID")
                        .HasColumnType("int");

                    b.Property<int?>("AdmissionFileID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.HasKey("AdmisssionFileID", "VitalSignID");

                    b.HasIndex("AdmissionFileID");

                    b.ToTable("PatientVital");
                });

            modelBuilder.Entity("EFCore.Domain.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<double>("Dosage")
                        .HasColumnType("float");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("MedicationID")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            PrescriptionID = 101,
                            DateIssued = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = 102,
                            Dosage = 1.0,
                            Instruction = "Take dosage every 4 to 6 hours",
                            MedicationID = 107
                        },
                        new
                        {
                            PrescriptionID = 103,
                            DateIssued = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = 105,
                            Dosage = 1.0,
                            Instruction = "Once a day beginning 6 hours after the procedure and continuing for 1 year",
                            MedicationID = 106
                        });
                });

            modelBuilder.Entity("EFCore.Domain.ProcedureHistory", b =>
                {
                    b.Property<int>("ProcedureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("ProcedureDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("ProcedureID");

                    b.HasIndex("PatientID");

                    b.ToTable("ProcedureHistory");
                });

            modelBuilder.Entity("EFCore.Domain.Qualification", b =>
                {
                    b.Property<int>("QualificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("QualificationID");

                    b.ToTable("Qualification");

                    b.HasData(
                        new
                        {
                            QualificationID = 101,
                            Description = "Public Administration and Management",
                            Title = "National Diploma"
                        },
                        new
                        {
                            QualificationID = 102,
                            Description = "Higher Certificate in Office Administration",
                            Title = "National Senior Certificate (NSC)"
                        },
                        new
                        {
                            QualificationID = 103,
                            Description = "Public Relations Management",
                            Title = "National Diploma"
                        },
                        new
                        {
                            QualificationID = 104,
                            Description = "Bachelor of Commerce Honours in Organizational Psychology ",
                            Title = "Honours Degree"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Receptionist", b =>
                {
                    b.Property<int>("ClerkID")
                        .HasColumnType("int");

                    b.Property<int>("QualificationID")
                        .HasColumnType("int");

                    b.HasKey("ClerkID");

                    b.HasIndex("QualificationID");

                    b.ToTable("Receptionist");

                    b.HasData(
                        new
                        {
                            ClerkID = 113,
                            QualificationID = 102
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Referral", b =>
                {
                    b.Property<int>("ReferralID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiagnosisID")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("ReferringDoctorID")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistID")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmitted")
                        .HasColumnType("bit");

                    b.HasKey("ReferralID");

                    b.HasIndex("DiagnosisID");

                    b.HasIndex("PatientID");

                    b.HasIndex("SpecialistID");

                    b.ToTable("Referral");

                    b.HasData(
                        new
                        {
                            ReferralID = 101,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(3757),
                            DiagnosisID = 101,
                            PatientID = 101,
                            Reason = "Esophageal inflammation is sever along the left side of the neck.",
                            ReferringDoctorID = 101,
                            SpecialistID = 102,
                            isAdmitted = true
                        },
                        new
                        {
                            ReferralID = 102,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(8165),
                            DiagnosisID = 102,
                            PatientID = 102,
                            Reason = "Dull pain causes loss of appetite.",
                            ReferringDoctorID = 101,
                            SpecialistID = 105,
                            isAdmitted = true
                        },
                        new
                        {
                            ReferralID = 103,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(8268),
                            DiagnosisID = 103,
                            PatientID = 103,
                            Reason = "Patient has difficulty breathing.",
                            ReferringDoctorID = 111,
                            SpecialistID = 104,
                            isAdmitted = true
                        },
                        new
                        {
                            ReferralID = 104,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(8274),
                            DiagnosisID = 104,
                            PatientID = 104,
                            Reason = "Aggressive leukemia treatment required.",
                            ReferringDoctorID = 111,
                            SpecialistID = 108,
                            isAdmitted = true
                        },
                        new
                        {
                            ReferralID = 105,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(8276),
                            DiagnosisID = 105,
                            PatientID = 105,
                            Reason = "Surgical removal of the overactive gland may be required.",
                            ReferringDoctorID = 101,
                            SpecialistID = 103,
                            isAdmitted = true
                        },
                        new
                        {
                            ReferralID = 106,
                            AdmissionDate = new DateTime(2021, 2, 15, 8, 5, 31, 576, DateTimeKind.Local).AddTicks(8284),
                            DiagnosisID = 106,
                            PatientID = 106,
                            Reason = "Surgical removal of the overactive gland may be required.",
                            ReferringDoctorID = 111,
                            SpecialistID = 103,
                            isAdmitted = false
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("RoleID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 101,
                            RoleName = "Administrator"
                        },
                        new
                        {
                            RoleID = 102,
                            RoleName = "Receptionist"
                        },
                        new
                        {
                            RoleID = 103,
                            RoleName = "Specialist"
                        },
                        new
                        {
                            RoleID = 104,
                            RoleName = "General Practitioner"
                        },
                        new
                        {
                            RoleID = 105,
                            RoleName = "Nurse"
                        },
                        new
                        {
                            RoleID = 106,
                            RoleName = "Sister Nurse"
                        },
                        new
                        {
                            RoleID = 107,
                            RoleName = "Ward Manager"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.ShiftSlot", b =>
                {
                    b.Property<int>("ShiftSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShiftSlotID");

                    b.ToTable("ShiftSlot");

                    b.HasData(
                        new
                        {
                            ShiftSlotID = 101,
                            Description = "Morning",
                            EndTime = new DateTime(2020, 6, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2020, 6, 23, 5, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ShiftSlotID = 102,
                            Description = "Evening",
                            EndTime = new DateTime(2020, 6, 24, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2020, 6, 23, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Specialization", b =>
                {
                    b.Property<int>("SpecializationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("SpecializationID");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            SpecializationID = 101,
                            Description = "Surgery"
                        },
                        new
                        {
                            SpecializationID = 102,
                            Description = "Radiation Oncology"
                        },
                        new
                        {
                            SpecializationID = 103,
                            Description = "Anesthesiology"
                        },
                        new
                        {
                            SpecializationID = 104,
                            Description = "Oncology"
                        },
                        new
                        {
                            SpecializationID = 105,
                            Description = "Gynecology"
                        },
                        new
                        {
                            SpecializationID = 106,
                            Description = "Dermatology"
                        },
                        new
                        {
                            SpecializationID = 107,
                            Description = "Paediatrics"
                        },
                        new
                        {
                            SpecializationID = 108,
                            Description = "Endocrinology"
                        },
                        new
                        {
                            SpecializationID = 109,
                            Description = "Cardiology"
                        },
                        new
                        {
                            SpecializationID = 110,
                            Description = "Neurology"
                        },
                        new
                        {
                            SpecializationID = 111,
                            Description = "Urology"
                        },
                        new
                        {
                            SpecializationID = 112,
                            Description = "Psychiatry"
                        },
                        new
                        {
                            SpecializationID = 113,
                            Description = "Physical Medicine & Occupational Therapy"
                        },
                        new
                        {
                            SpecializationID = 114,
                            Description = "General Medicine"
                        },
                        new
                        {
                            SpecializationID = 115,
                            Description = "Midwifery"
                        },
                        new
                        {
                            SpecializationID = 116,
                            Description = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.StaffMember", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("StaffType")
                        .HasColumnType("int");

                    b.Property<int>("SuburbID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("WorkNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("StaffID");

                    b.HasIndex("SuburbID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("StaffMember");

                    b.HasData(
                        new
                        {
                            StaffID = 101,
                            AddressLine1 = "52 Rubin Cres",
                            AddressLine2 = "",
                            EmailAddress = "A.Abbington@wardx.co.za",
                            EmployeeID = "HWMS062020101",
                            FirstName = "Aldridge",
                            Gender = 1,
                            LastName = "Abbington",
                            MobileNumber = "0824127849",
                            StaffType = 0,
                            SuburbID = 102,
                            UserID = 101,
                            WorkNumber = "0214217894",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 102,
                            AddressLine1 = "38 Blackthorn Ave",
                            AddressLine2 = "Forest Hill",
                            EmailAddress = "R.Alger@wardx.co.za",
                            EmployeeID = "HWMS062020102",
                            FirstName = "Roland",
                            Gender = 1,
                            LastName = "Alger",
                            MobileNumber = "0824224217",
                            StaffType = 0,
                            SuburbID = 103,
                            UserID = 102,
                            WorkNumber = "0214217824",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 103,
                            AddressLine1 = "12 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "T.Aberdeen@wardx.co.za",
                            EmployeeID = "HWMS062020103",
                            FirstName = "Tammy",
                            Gender = 0,
                            LastName = "Aberdeen",
                            MobileNumber = "0417430417",
                            StaffType = 0,
                            SuburbID = 103,
                            UserID = 103,
                            WorkNumber = "0411100743",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 104,
                            AddressLine1 = "13 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "B.Davis@wardx.co.za",
                            EmployeeID = "HWMS062020104",
                            FirstName = "Benjamin Byron",
                            Gender = 1,
                            LastName = "Davis",
                            MobileNumber = "0417957517",
                            StaffType = 0,
                            SuburbID = 107,
                            UserID = 104,
                            WorkNumber = "0411753743",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 105,
                            AddressLine1 = "14 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "R.Clark@wardx.co.za",
                            EmployeeID = "HWMS062020105",
                            FirstName = "Roger",
                            Gender = 1,
                            LastName = "Clark",
                            MobileNumber = "0417936887",
                            StaffType = 0,
                            SuburbID = 106,
                            UserID = 105,
                            WorkNumber = "0411754413",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 106,
                            AddressLine1 = "15 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "R.Wiethoff@wardx.co.za",
                            EmployeeID = "HWMS062020106",
                            FirstName = "Rob",
                            Gender = 1,
                            LastName = "Wiethoff",
                            MobileNumber = "0417782887",
                            StaffType = 0,
                            SuburbID = 107,
                            UserID = 106,
                            WorkNumber = "0414164413",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 107,
                            AddressLine1 = "18 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "C.Moore@wardx.co.za",
                            EmployeeID = "HWMS062020107",
                            FirstName = "Cali Elizabeth",
                            Gender = 0,
                            LastName = "Moore",
                            MobileNumber = "0417784748",
                            StaffType = 0,
                            SuburbID = 105,
                            UserID = 107,
                            WorkNumber = "0414166483",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 108,
                            AddressLine1 = "21 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "M.Buccianti@wardx.co.za",
                            EmployeeID = "HWMS062020108",
                            FirstName = "Marissa",
                            Gender = 0,
                            LastName = "Buccianti",
                            MobileNumber = "0419634748",
                            StaffType = 0,
                            SuburbID = 103,
                            UserID = 108,
                            WorkNumber = "0415546483",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 109,
                            AddressLine1 = "23 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "J.Armeniox@wardx.co.za",
                            EmployeeID = "HWMS062020109",
                            FirstName = "Jo",
                            Gender = 0,
                            LastName = "Armeniox",
                            MobileNumber = "0419612498",
                            StaffType = 0,
                            SuburbID = 108,
                            UserID = 109,
                            WorkNumber = "0415546113",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 110,
                            AddressLine1 = "25 La Roche Dr",
                            AddressLine2 = "",
                            EmailAddress = "S.Strelitz@wardx.co.za",
                            EmployeeID = "HWMS062020110",
                            FirstName = "Samantha",
                            Gender = 0,
                            LastName = "Strelitz",
                            MobileNumber = "0413753498",
                            StaffType = 0,
                            SuburbID = 106,
                            UserID = 110,
                            WorkNumber = "0415465113",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 111,
                            AddressLine1 = "75 Roach Ave",
                            AddressLine2 = "Dale Drive",
                            EmailAddress = "S.Marzocchi@wardx.co.za",
                            EmployeeID = "HWMS062020111",
                            FirstName = "Sophia",
                            Gender = 0,
                            LastName = "Marzocchi",
                            MobileNumber = "0412020111",
                            StaffType = 0,
                            SuburbID = 109,
                            UserID = 111,
                            WorkNumber = "0515465113",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 112,
                            AddressLine1 = "79 Roach Ave",
                            AddressLine2 = "Dale Drive",
                            EmailAddress = "D.Creech@wardx.co.za",
                            EmployeeID = "HWMS062020112",
                            FirstName = "Don",
                            Gender = 1,
                            LastName = "Creech",
                            MobileNumber = "0412020112",
                            StaffType = 1,
                            SuburbID = 108,
                            UserID = 112,
                            WorkNumber = "0515465783",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 113,
                            AddressLine1 = "105 Roach Ave",
                            AddressLine2 = "Dale Drive",
                            EmailAddress = "D.McFarland@wardx.co.za",
                            EmployeeID = "HWMS062020113",
                            FirstName = "Daron",
                            Gender = 1,
                            LastName = "McFarland",
                            MobileNumber = "0412020113",
                            StaffType = 2,
                            SuburbID = 109,
                            UserID = 113,
                            WorkNumber = "0515463573",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 114,
                            AddressLine1 = "104 Roachella Street ",
                            AddressLine2 = "Country Drive",
                            EmailAddress = "N.Birch@wardx.co.za",
                            EmployeeID = "HWMS062020114",
                            FirstName = "Nick",
                            Gender = 1,
                            LastName = "Birch",
                            MobileNumber = "0419875200",
                            StaffType = 1,
                            SuburbID = 101,
                            UserID = 114,
                            WorkNumber = "0515968836",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 115,
                            AddressLine1 = "25 Flyton Ave",
                            AddressLine2 = "Dickson Drive",
                            EmailAddress = "M.Foreman-Greenwald@wardx.co.za",
                            EmployeeID = "HWMS062020115",
                            FirstName = "Missy",
                            Gender = 0,
                            LastName = "Foreman-Greenwald",
                            MobileNumber = "0412625403",
                            StaffType = 1,
                            SuburbID = 104,
                            UserID = 115,
                            WorkNumber = "0519966587",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 116,
                            AddressLine1 = "1050 Hillside Downs",
                            AddressLine2 = "",
                            EmailAddress = "A.Glouberman@wardx.co.za",
                            EmployeeID = "HWMS062020118",
                            FirstName = "Andrew",
                            Gender = 1,
                            LastName = "Globerman",
                            MobileNumber = "0412035596",
                            StaffType = 1,
                            SuburbID = 107,
                            UserID = 116,
                            WorkNumber = "0510003650",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 117,
                            AddressLine1 = "4525 Piestry Drive",
                            AddressLine2 = "The Factory",
                            EmailAddress = "J.Glaser@wardx.co.za",
                            EmployeeID = "HWMS062020117",
                            FirstName = "Jessi",
                            Gender = 0,
                            LastName = "Glaser",
                            MobileNumber = "0418932718",
                            StaffType = 1,
                            SuburbID = 104,
                            UserID = 117,
                            WorkNumber = "0515656893",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 118,
                            AddressLine1 = "134 Heugh Road",
                            AddressLine2 = "The Loft",
                            EmailAddress = "G.Alverez@wardx.co.za",
                            EmployeeID = "HWMS062020118",
                            FirstName = "Gina",
                            Gender = 0,
                            LastName = "Alverez",
                            MobileNumber = "0419837960",
                            StaffType = 1,
                            SuburbID = 101,
                            UserID = 118,
                            WorkNumber = "0515859632",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 119,
                            AddressLine1 = "1223 Pepperment CLose",
                            AddressLine2 = "Sundowns Estate",
                            EmailAddress = "M.MacDell@wardx.co.za",
                            EmployeeID = "HWMS062020119",
                            FirstName = "Matthew",
                            Gender = 1,
                            LastName = "MacDell",
                            MobileNumber = "0410215496",
                            StaffType = 1,
                            SuburbID = 102,
                            UserID = 119,
                            WorkNumber = "0515435960",
                            isActive = true
                        },
                        new
                        {
                            StaffID = 120,
                            AddressLine1 = "102 Beach Road",
                            AddressLine2 = "",
                            EmailAddress = "J.Bilzerian@wardx.co.za",
                            EmployeeID = "HWMS062020120",
                            FirstName = "Jay",
                            Gender = 1,
                            LastName = "Bilzerian",
                            MobileNumber = "0412020213",
                            StaffType = 3,
                            SuburbID = 102,
                            UserID = 120,
                            WorkNumber = "0517896542",
                            isActive = true
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Suburb", b =>
                {
                    b.Property<int>("SuburbID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("SuburbID");

                    b.HasIndex("CityID");

                    b.ToTable("Suburb");

                    b.HasData(
                        new
                        {
                            SuburbID = 101,
                            CityID = 101,
                            PostalCode = "6070",
                            SuburbName = "Walmer"
                        },
                        new
                        {
                            SuburbID = 102,
                            CityID = 101,
                            PostalCode = "6001",
                            SuburbName = "Summerstrand"
                        },
                        new
                        {
                            SuburbID = 103,
                            CityID = 101,
                            PostalCode = "6013",
                            SuburbName = "Humewood"
                        },
                        new
                        {
                            SuburbID = 104,
                            CityID = 101,
                            PostalCode = "6001",
                            SuburbName = "South End"
                        },
                        new
                        {
                            SuburbID = 105,
                            CityID = 101,
                            PostalCode = "6001",
                            SuburbName = "Forest Hill"
                        },
                        new
                        {
                            SuburbID = 106,
                            CityID = 101,
                            PostalCode = "6011",
                            SuburbName = "Schoenmakerskop"
                        },
                        new
                        {
                            SuburbID = 107,
                            CityID = 101,
                            PostalCode = "6070",
                            SuburbName = "Lovemore Park"
                        },
                        new
                        {
                            SuburbID = 108,
                            CityID = 101,
                            PostalCode = "6001",
                            SuburbName = "North End"
                        },
                        new
                        {
                            SuburbID = 109,
                            CityID = 101,
                            PostalCode = "6020",
                            SuburbName = "Korsten"
                        },
                        new
                        {
                            SuburbID = 110,
                            CityID = 101,
                            PostalCode = "6025",
                            SuburbName = "Western Hills"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NurseID")
                        .HasColumnType("int");

                    b.Property<string>("ObservationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentTypeID")
                        .HasColumnType("int");

                    b.HasKey("TreatmentID");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("EFCore.Domain.TreatmentType", b =>
                {
                    b.Property<int>("TreatmentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("TreatmentTypeID");

                    b.ToTable("TreatmentType");

                    b.HasData(
                        new
                        {
                            TreatmentTypeID = 101,
                            Description = "Changed Wound Dressing"
                        },
                        new
                        {
                            TreatmentTypeID = 102,
                            Description = "Replace IV Bag"
                        },
                        new
                        {
                            TreatmentTypeID = 103,
                            Description = "Draw Blood Sample"
                        },
                        new
                        {
                            TreatmentTypeID = 104,
                            Description = "Change Bed Pad"
                        },
                        new
                        {
                            TreatmentTypeID = 105,
                            Description = "Change Catheter Bag"
                        },
                        new
                        {
                            TreatmentTypeID = 106,
                            Description = "Specimen Collection"
                        },
                        new
                        {
                            TreatmentTypeID = 107,
                            Description = "Blood Transfusion"
                        },
                        new
                        {
                            TreatmentTypeID = 108,
                            Description = "Intubate"
                        },
                        new
                        {
                            TreatmentTypeID = 109,
                            Description = "Stitch Wound(s)"
                        },
                        new
                        {
                            TreatmentTypeID = 110,
                            Description = "Hygiene Care"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("UserID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 101,
                            Avatar = "001-lego",
                            PasswordHash = "$HWMS06$10000$uiVvIEQW83F9aJAjzfiFAlhFqvE0jG+nOR5XKxhDa5o8T8VL",
                            UserName = "HWMS062020101"
                        },
                        new
                        {
                            UserID = 102,
                            Avatar = "001-lego",
                            PasswordHash = "$HWMS06$10000$1Pe0ZeHvtvn0C3WdWzvv4KasL2psdAlokhy6NxZok6iyx2pb",
                            UserName = "HWMS062020102"
                        },
                        new
                        {
                            UserID = 103,
                            Avatar = "017-lego",
                            PasswordHash = "$HWMS06$10000$jcz5Ei8Of4Lv1sJmyqhjv2+9e2oaOcwQfPK9r1NG/QSDIqA4",
                            UserName = "HWMS062020103"
                        },
                        new
                        {
                            UserID = 104,
                            Avatar = "007-lego",
                            PasswordHash = "$HWMS06$10000$SYW4siAsSBp7OrlmhPLqvw5+O4HGFdG2fu2NoLjamzjF1QgV",
                            UserName = "HWMS062020104"
                        },
                        new
                        {
                            UserID = 105,
                            Avatar = "014-lego",
                            PasswordHash = "$HWMS06$10000$8yOHaatwa5N/NykUdWTrc0kuHgJqkpeJGHfNDsngr2iG2k6a",
                            UserName = "HWMS062020105"
                        },
                        new
                        {
                            UserID = 106,
                            Avatar = "018-lego",
                            PasswordHash = "$HWMS06$10000$D9suRuWsDo1ZRk3c8Luf8DVyO/VwxK//a4pdoubZCx+wXtx9",
                            UserName = "HWMS062020106"
                        },
                        new
                        {
                            UserID = 107,
                            Avatar = "003-lego",
                            PasswordHash = "$HWMS06$10000$dCU/tNEume2bRadF+DMJ9iHR4GmpE+hmPIZsZifIq+HoO5cI",
                            UserName = "HWMS062020107"
                        },
                        new
                        {
                            UserID = 108,
                            Avatar = "013-lego",
                            PasswordHash = "$HWMS06$10000$veu2Er28oYupxxIgi2uuws2oUgZ8+PEUVVe74motl51frx+h",
                            UserName = "HWMS062020108"
                        },
                        new
                        {
                            UserID = 109,
                            Avatar = "021-lego",
                            PasswordHash = "$HWMS06$10000$vb0D1GhPre89GQyfZ3JURPBCxi5/FYwaQhwRaLK2OKcMYn7/",
                            UserName = "HWMS062020109"
                        },
                        new
                        {
                            UserID = 110,
                            Avatar = "072-woman",
                            PasswordHash = "$HWMS06$10000$62Ka4ncOkRKIxXo3ivnpXcLsL5/W2USmro/k5maeJRwiuw/q",
                            UserName = "HWMS062020110"
                        },
                        new
                        {
                            UserID = 111,
                            Avatar = "058-thief",
                            PasswordHash = "$HWMS06$10000$K0XnTJahNPKXAS2QOQl6SrmWkWQ7fuJNJfFAL7t9ssC2MPzz",
                            UserName = "HWMS062020111"
                        },
                        new
                        {
                            UserID = 112,
                            Avatar = "041-businessman",
                            PasswordHash = "$HWMS06$10000$AWpJVzNCv6MOrpRSbFevT4j/xBoVWNA7vW+7i0eSfBiZCg9X",
                            UserName = "HWMS062020112"
                        },
                        new
                        {
                            UserID = 113,
                            Avatar = "036-mariachi",
                            PasswordHash = "$HWMS06$10000$veq/Cr7cRqfeoh5b6QppBXs92sXLWd6gG9bw58K9fUw+XxkI",
                            UserName = "HWMS062020113"
                        },
                        new
                        {
                            UserID = 114,
                            Avatar = "014-lego",
                            PasswordHash = "$HWMS06$10000$cW6RU4u8GjO7wF7i52Ug5Fe+h5ZA+ZKVflRsHecaqGgt8Lbl",
                            UserName = "HWMS062020114"
                        },
                        new
                        {
                            UserID = 115,
                            Avatar = "017-lego",
                            PasswordHash = "$HWMS06$10000$dAOeXtspxkqy9MEj0nPQycLr+36tG1s4es7BRsS0NV8oSl47",
                            UserName = "HWMS062020115"
                        },
                        new
                        {
                            UserID = 116,
                            Avatar = "032-boy",
                            PasswordHash = "$HWMS06$10000$zmTZKfoDzfA53+Bee+N9Z/hfCZlipBYZOi0NKB4W2eqnxM9m",
                            UserName = "HWMS062020116"
                        },
                        new
                        {
                            UserID = 117,
                            Avatar = "021-lego",
                            PasswordHash = "$HWMS06$10000$DqtBJ85m2JBE5d8bC5H/PB3w95u7sCdhTtCRZ3Abl3rIoYwA",
                            UserName = "HWMS062020117"
                        },
                        new
                        {
                            UserID = 118,
                            Avatar = "024-lego",
                            PasswordHash = "$HWMS06$10000$zIX0XYt6YlWAYWQ2exmBaVHXgNe0NEl/HRNh2BsxyQnPKru2",
                            UserName = "HWMS062020118"
                        },
                        new
                        {
                            UserID = 119,
                            Avatar = "029-explorer",
                            PasswordHash = "$HWMS06$10000$x3cGndJF6m0LscGv+1U0tm1PkbQHfkaWPMQnzumiQErsFLIf",
                            UserName = "HWMS062020119"
                        },
                        new
                        {
                            UserID = 120,
                            Avatar = "041-businessman",
                            PasswordHash = "$HWMS06$10000$EOaRcD70oxk2IiB5IK0B/hOTBrgMabnuCMHGfbBmxIbuLsOK",
                            UserName = "HWMS062020120"
                        });
                });

            modelBuilder.Entity("EFCore.Domain.UserRole", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            RoleID = 104,
                            UserID = 101
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 102
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 103
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 104
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 105
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 106
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 107
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 108
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 109
                        },
                        new
                        {
                            RoleID = 103,
                            UserID = 110
                        },
                        new
                        {
                            RoleID = 104,
                            UserID = 111
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 112
                        },
                        new
                        {
                            RoleID = 102,
                            UserID = 113
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 114
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 115
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 116
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 117
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 118
                        },
                        new
                        {
                            RoleID = 105,
                            UserID = 119
                        },
                        new
                        {
                            RoleID = 107,
                            UserID = 120
                        });
                });

            modelBuilder.Entity("EFCore.Domain.VitalSign", b =>
                {
                    b.Property<int>("VitalSignID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BMI")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BloodGroupID")
                        .HasColumnType("int");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BodyTemperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hypoglycemia")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PulseRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("VitalSignID");

                    b.HasIndex("BloodGroupID");

                    b.ToTable("VitalSign");
                });

            modelBuilder.Entity("EFCore.Domain.AdmissionFile", b =>
                {
                    b.HasOne("EFCore.Domain.Doctor", "Doctor")
                        .WithMany("AdmissionFiles")
                        .HasForeignKey("AssignedSpecialistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Bed", "Bed")
                        .WithMany("AdmissionFiles")
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany("AdmissionFiles")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionID");
                });

            modelBuilder.Entity("EFCore.Domain.ClerkComputer", b =>
                {
                    b.HasOne("EFCore.Domain.Receptionist", "Receptionist")
                        .WithMany("ClerkComputer")
                        .HasForeignKey("ClerkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.ComputerSkill", "ComputerSkill")
                        .WithMany()
                        .HasForeignKey("ComputerSkillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Diagnosis", b =>
                {
                    b.HasOne("EFCore.Domain.MedicalCondition", "MedicalCondition")
                        .WithMany()
                        .HasForeignKey("MedicalConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Doctor", b =>
                {
                    b.HasOne("EFCore.Domain.StaffMember", "IsStaffMember")
                        .WithOne("Doctor")
                        .HasForeignKey("EFCore.Domain.Doctor", "DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.DoctorType", "DoctorType")
                        .WithMany()
                        .HasForeignKey("DoctorTypeID1");

                    b.HasOne("EFCore.Domain.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationID1");
                });

            modelBuilder.Entity("EFCore.Domain.DoctorInspection", b =>
                {
                    b.HasOne("EFCore.Domain.Doctor", "Doctor")
                        .WithMany("DoctorInspection")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany("DoctorInspection")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.DoctorSchedule", b =>
                {
                    b.HasOne("EFCore.Domain.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.ShiftSlot", "ShiftSlot")
                        .WithMany()
                        .HasForeignKey("ShiftSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.EmergencyContact", b =>
                {
                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithOne("EmergencyContact")
                        .HasForeignKey("EFCore.Domain.EmergencyContact", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Suburb", "Suburb")
                        .WithMany("EmergencyContact")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.MedicalAid", b =>
                {
                    b.HasOne("EFCore.Domain.MedicalAidPlan", "MedicalAidPlan")
                        .WithMany()
                        .HasForeignKey("MedicalAidPlanID1");

                    b.HasOne("EFCore.Domain.MedicalAidScheme", "MedicalAidScheme")
                        .WithMany()
                        .HasForeignKey("MedicalAidSchemeID1");

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithOne("MedicalAid")
                        .HasForeignKey("EFCore.Domain.MedicalAid", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.MedicalHistory", b =>
                {
                    b.HasOne("EFCore.Domain.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany("MedicalHistory")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Medication", b =>
                {
                    b.HasOne("EFCore.Domain.Formulation", "Formulation")
                        .WithMany()
                        .HasForeignKey("FormulationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.MedicationSchedule", "MedicationSchedule")
                        .WithMany()
                        .HasForeignKey("MedicationScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.NextOfKin", b =>
                {
                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithOne("NextOfKin")
                        .HasForeignKey("EFCore.Domain.NextOfKin", "PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Suburb", "Suburb")
                        .WithMany("NextOfKin")
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Nurse", b =>
                {
                    b.HasOne("EFCore.Domain.StaffMember", "isStaffMember")
                        .WithOne("Nurse")
                        .HasForeignKey("EFCore.Domain.Nurse", "NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.NurseType", "NurseType")
                        .WithMany()
                        .HasForeignKey("NurseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.NurseBar", b =>
                {
                    b.HasOne("EFCore.Domain.Bar", "Bar")
                        .WithMany()
                        .HasForeignKey("BarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Nurse", "Nurse")
                        .WithMany("NurseBar")
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.NurseInspection", b =>
                {
                    b.HasOne("EFCore.Domain.Nurse", "Nurse")
                        .WithMany("NurseInspection")
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany("NurseInspection")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.NurseSchedule", b =>
                {
                    b.HasOne("EFCore.Domain.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.ShiftSlot", "ShiftSlot")
                        .WithMany()
                        .HasForeignKey("ShiftSlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Patient", b =>
                {
                    b.HasOne("EFCore.Domain.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.PatientMovement", b =>
                {
                    b.HasOne("EFCore.Domain.AdmissionFile", "AdmissionFile")
                        .WithMany()
                        .HasForeignKey("AdmissionFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.PatientVital", b =>
                {
                    b.HasOne("EFCore.Domain.AdmissionFile", "AdmissionFile")
                        .WithMany()
                        .HasForeignKey("AdmissionFileID");
                });

            modelBuilder.Entity("EFCore.Domain.Prescription", b =>
                {
                    b.HasOne("EFCore.Domain.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.ProcedureHistory", b =>
                {
                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Receptionist", b =>
                {
                    b.HasOne("EFCore.Domain.StaffMember", "isStaffMember")
                        .WithOne("Receptionist")
                        .HasForeignKey("EFCore.Domain.Receptionist", "ClerkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Qualification", "Qualification")
                        .WithMany()
                        .HasForeignKey("QualificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Referral", b =>
                {
                    b.HasOne("EFCore.Domain.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.Doctor", "Doctor")
                        .WithMany("Referrals")
                        .HasForeignKey("SpecialistID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.StaffMember", b =>
                {
                    b.HasOne("EFCore.Domain.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.User", "User")
                        .WithOne("StaffMember")
                        .HasForeignKey("EFCore.Domain.StaffMember", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.Suburb", b =>
                {
                    b.HasOne("EFCore.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.UserRole", b =>
                {
                    b.HasOne("EFCore.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCore.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCore.Domain.VitalSign", b =>
                {
                    b.HasOne("EFCore.Domain.BloodGroup", "BloodGroup")
                        .WithMany()
                        .HasForeignKey("BloodGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
